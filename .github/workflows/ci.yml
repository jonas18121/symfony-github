name: Pipeline-CI
on:
  workflow_dispatch:
  pull_request: # autoriser de jouer les jobs dans les pull request des branches listées ci-dessous
    branches:
      # - production
      # - main
      - develop
    paths-ignore:
      - '**.md'
      - 'examples/**'
  push:
    branches:
      - '*' # permet d'executer les jobs avec les push de n'importe quel branches
jobs:
  ci:
    runs-on: ${{ matrix.operating-system }} 

    # false : Arrêter la pipeline s'il y a une erreur
    continue-on-error: false # or true 

    if: github.ref != 'refs/heads/main' # ne pas jouer ce job lors d'un push ou d'un pull request sur la branche main

    strategy:
      matrix:
        operating-system: [ubuntu-22.04, ubuntu-20.04, ubuntu-18.04, ubuntu-latest] # execute les actions ci-dessous dans les 4 OS préciser ici
        php-versions: ['8.1'] # Précise la version PHP à utiliser, execute les actions ci-dessous avec les version de PHP préciser ici
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}

    steps:
      # Action 1 : Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      #  Action 2 : https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }} # Précise la version PHP à utiliser
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json

      #  Action 3 : cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            vendor
          key: ${{ runner.os }}-${{ hashFiles('composer.lock') }}

      #  Action 4 : Install composer
      - name: "Composer install"
        run: composer install --no-interaction --no-progress

      #  Action 5 : Install Symfony CLI
      - name: Symfony CLI
        run: |
          curl -sS https://get.symfony.com/cli/installer | bash
          mv /home/runner/.symfony5/bin/symfony /usr/local/bin/symfony

      #  Action 6 : Check vulnerabilities
      - name: Symfony Check Vulnerabilities
        run: symfony check:security

      #  Action 7 : PHP CS FIXER
      - name: PHP-CS-Fixer
        run: |
          composer require friendsofphp/php-cs-fixer
          ./vendor/bin/php-cs-fixer fix --dry-run

      #  Action 8 : PHP STAN
      - name: PHP Stan
        run: |
          ./vendor/bin/simple-phpunit install
          composer require phpstan/phpstan
          composer config --no-plugins allow-plugins.phpstan/extension-installer true
          composer require phpstan/extension-installer
          composer require phpstan/phpstan-symfony
          ./vendor/bin/phpstan analyse src --memory-limit 1G

      #  Action 9 : Linteur pour les fichiers Yaml
      - name: Lint YAML files
        run: ./bin/console lint:yaml config --parse-tags

      #  Action 10 : Linteur pour les fichiers Twig
      - name: Lint Twig templates
        run: ./bin/console lint:twig templates --env=prod

      #  Action 11 : Linteur pour vérifier le paramétrage des services
      - name: Lint Parameters and Services
        run: ./bin/console lint:container --no-debug

      #  Action 12 : Linteur pour vérifier que les entité doctrine sont bien mappé et conforme aux recommendation Symfony
      - name: Lint Doctrine entities
        run: ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction

      #  Action 13 : Execution de PHPUnit
      - name: PHP Unit
        run: ./bin/phpunit
